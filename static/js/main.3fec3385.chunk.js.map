{"version":3,"sources":["components/TodoList/TodoList.jsx","components/API/api.js","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["TodoList","state","query","filterOption","this","props","todos","callback","selectedUserId","filteredTodos","filter","todo","title","includes","completed","Error","className","name","onChange","event","setState","target","value","type","placeholder","map","userId","id","key","classnames","checked","readOnly","onClick","React","PureComponent","URL","request","a","endpoint","fetch","response","json","result","data","CurrentUser","user","then","currUser","prevProps","email","phone","reset","App","handleClick","resetSelectedUserId","allTodos","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3fec3385.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport './TodoList.scss'; //\n\nexport class TodoList extends React.PureComponent {\n  state = {\n    query: '',\n    filterOption: 'all',\n  }\n\n  render() {\n    const { todos, callback, selectedUserId } = this.props;\n    const todosWithoutNull = todos.filter(todo => todo.title !== null);\n    let filteredTodos = todosWithoutNull\n      .filter(todo => todo.title.includes(this.state.query));\n\n    switch (this.state.filterOption) {\n      case 'completed':\n        filteredTodos = filteredTodos.filter(todo => todo.completed === true);\n        break;\n\n      case 'active':\n        filteredTodos = filteredTodos.filter(todo => todo.completed === false);\n        break;\n\n      case 'all':\n        break;\n\n      default:\n        throw new Error('TodoList, line 8, unexpected filterOption');\n    }\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n\n        <select\n          name=\"sort\"\n          className=\"select\"\n          onChange={(event => (\n            this.setState({ filterOption: event.target.value })\n          ))}\n        >\n          <option value=\"all\">Show all</option>\n          <option value=\"completed\">Show completed</option>\n          <option value=\"active\">Show active</option>\n        </select>\n\n        <input\n          type=\"text\"\n          placeholder=\"Type todo title\"\n          value={this.state.query}\n          onChange={(event) => {\n            this.setState({ query: event.target.value });\n          }}\n        />\n\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {filteredTodos.map(\n              ({ title, completed, userId, id }) => !!title && userId && (\n              <li\n                key={id}\n                className={classnames(\n                  'TodoList__item',\n                  { 'TodoList__item--checked': completed },\n                  { 'TodoList__item--unchecked': !completed },\n                )}\n              >\n                <label>\n                  <input type=\"checkbox\" checked={completed} readOnly />\n                  <p>{title}</p>\n                </label>\n\n                <button\n                  className={classnames(\n                    'button',\n                    // eslint-disable-next-line max-len\n                    { 'TodoList__user-button--selected': userId === selectedUserId },\n                  )}\n                  type=\"button\"\n                  onClick={() => {\n                    callback(userId);\n                  }}\n                  id={userId}\n                >\n                  User&nbsp;\n                  {`#${userId}`}\n                </button>\n              </li>\n              ),\n            )}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    userId: PropTypes.number,\n    title: PropTypes.string,\n    completed: PropTypes.bool,\n    createdAt: PropTypes.string.isRequired,\n    updatedAt: PropTypes.string.isRequired,\n  })).isRequired,\n  callback: PropTypes.func.isRequired,\n  selectedUserId: PropTypes.number.isRequired,\n};\n","const URL = 'https://mate-api.herokuapp.com';\n\nexport const request = async(endpoint = '') => {\n  const response = await fetch(URL + endpoint);\n  const result = await response.json();\n\n  return result.data;\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { request } from '../API/api';\nimport './CurrentUser.scss';\n\nexport class CurrentUser extends React.PureComponent {\n  state = {\n    user: request(`/users/${this.props.userId}`)\n      .then(currUser => this.setState({ user: currUser })),\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.userId !== this.props.userId) {\n      request(`/users/${this.props.userId}`)\n        .then(currUser => this.setState({ user: currUser }));\n    }\n  }\n\n  render() {\n    const { user } = this.state;\n    const { name, email, phone } = user;\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>\n            {`Selected user: ${this.props.userId}`}\n          </span>\n        </h2>\n\n        <h3 className=\"CurrentUser__name\">{name}</h3>\n        <p className=\"CurrentUser__email\">{email}</p>\n        <p className=\"CurrentUser__phone\">{phone}</p>\n\n        <button\n          className=\"\n            TodoList__user-button--selected\n            button\n            CurrentUser__clear\n          \"\n          type=\"button\"\n          onClick={this.props.reset}\n        >\n          Clear\n        </button>\n      </div>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number.isRequired,\n  reset: PropTypes.func.isRequired,\n};\n\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { request } from './components/API/api';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n  };\n\n  async componentDidMount() {\n    const allTodos = await request('/todos');\n\n    this.setState({ todos: allTodos });\n  }\n\n  handleClick = (userId) => {\n    this.setState({ selectedUserId: userId });\n  }\n\n  resetSelectedUserId = () => this.setState({ selectedUserId: 0 })\n\n  render() {\n    const { todos, selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={todos}\n            callback={this.handleClick}\n            selectedUserId={selectedUserId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                reset={this.resetSelectedUserId}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}