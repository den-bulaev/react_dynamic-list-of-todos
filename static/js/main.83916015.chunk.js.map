{"version":3,"sources":["App.jsx","components/TodoList/TodoList.jsx","components/API/api.js","components/CurrentUser/CurrentUser.jsx","index.js"],"names":["allTodos","TodoList","state","query","filterOption","this","props","todos","callback","selectedUserId","filteredTodos","filter","todo","title","includes","completed","className","name","onChange","event","setState","target","value","type","placeholder","map","userId","key","id","checked","readOnly","onClick","React","PureComponent","URL","request","a","endpoint","fetch","response","json","result","data","CurrentUser","user","then","currUser","prevProps","email","phone","reset","App","handleClick","resetSelectedUserId","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.83916015.chunk.js","sourcesContent":["import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { request } from './components/API/api';\n\nlet allTodos;\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n  };\n\n  async componentDidMount() {\n    allTodos = await request('/todos');\n    this.setState({ todos: allTodos });\n  }\n\n  handleClick = (userId) => {\n    this.setState({ selectedUserId: userId });\n  }\n\n  resetSelectedUserId = () => this.setState({ selectedUserId: 0 })\n\n  render() {\n    const { todos, selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={todos}\n            callback={this.handleClick}\n            selectedUserId={selectedUserId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                reset={this.resetSelectedUserId}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './TodoList.scss'; //\n\nexport class TodoList extends React.PureComponent {\n  state = {\n    query: '',\n    filterOption: 'all',\n  }\n\n  render() {\n    const { todos, callback, selectedUserId } = this.props;\n    const todosWithoutNull = todos.filter(todo => todo.title !== null);\n    let filteredTodos = todosWithoutNull\n      .filter(todo => todo.title.includes(this.state.query));\n\n    // eslint-disable-next-line default-case\n    switch (this.state.filterOption) {\n      case 'completed':\n        filteredTodos = filteredTodos.filter(todo => todo.completed === true);\n        break;\n\n      case 'active':\n        filteredTodos = filteredTodos.filter(todo => todo.completed === false);\n        break;\n    }\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n\n        <select\n          name=\"sort\"\n          className=\"select\"\n          onChange={(event => (\n            this.setState({ filterOption: event.target.value })\n          ))}\n        >\n          <option value=\"all\">Show all</option>\n          <option value=\"completed\">Show completed</option>\n          <option value=\"active\">Show active</option>\n        </select>\n\n        <input\n          type=\"text\"\n          placeholder=\"Type todo title\"\n          value={this.state.query}\n          onChange={(event) => {\n            this.setState({ query: event.target.value });\n          }}\n        />\n\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {filteredTodos.map(todo => !!todo.title && todo.userId && (\n            <li\n              key={todo.id}\n                  // eslint-disable-next-line max-len\n              className={`${'TodoList__item'} TodoList__item${todo.completed ? '--checked' : '--unchecked'}`}\n            >\n              <label>\n                <input type=\"checkbox\" checked={todo.completed} readOnly />\n                <p>{todo.title}</p>\n              </label>\n\n              <button\n                className={\n                  // eslint-disable-next-line max-len\n                  `TodoList__user-button${todo.userId === selectedUserId ? '--selected' : ''} button`\n                }\n                type=\"button\"\n                onClick={() => {\n                  callback(todo.userId);\n                }}\n                id={todo.userId}\n              >\n                User&nbsp;\n                {`#${todo.userId}`}\n              </button>\n            </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    userId: PropTypes.number,\n    title: PropTypes.string,\n    completed: PropTypes.bool,\n    createdAt: PropTypes.string.isRequired,\n    updatedAt: PropTypes.string.isRequired,\n  })).isRequired,\n  callback: PropTypes.func.isRequired,\n  selectedUserId: PropTypes.number.isRequired,\n};\n","const URL = 'https://mate-api.herokuapp.com';\n\nexport const request = async(endpoint = '') => {\n  const response = await fetch(URL + endpoint);\n  const result = await response.json();\n\n  return result.data;\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { request } from '../API/api';\nimport './CurrentUser.scss';\n\nexport class CurrentUser extends React.PureComponent {\n  state = {\n    user: request(`/users/${this.props.userId}`)\n      .then(currUser => this.setState({ user: currUser })),\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.userId !== this.props.userId) {\n      request(`/users/${this.props.userId}`)\n        .then(currUser => this.setState({ user: currUser }));\n    }\n  }\n\n  render() {\n    const { user } = this.state;\n    const { name, email, phone } = user;\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>\n            {`Selected user: ${this.props.userId}`}\n          </span>\n        </h2>\n\n        <h3 className=\"CurrentUser__name\">{name}</h3>\n        <p className=\"CurrentUser__email\">{email}</p>\n        <p className=\"CurrentUser__phone\">{phone}</p>\n\n        <button\n          className=\"\n            TodoList__user-button--selected\n            button\n            CurrentUser__clear\n          \"\n          type=\"button\"\n          onClick={this.props.reset}\n        >\n          Clear\n        </button>\n      </div>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number.isRequired,\n  reset: PropTypes.func.isRequired,\n};\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}